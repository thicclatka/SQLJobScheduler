{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SQLJobScheduler","text":"<p>A SQL-based job scheduler system designed to manage GPU-intensive Python jobs for a server.</p>"},{"location":"#overview","title":"Overview","text":"<ul> <li>Job Queue Management: Uses SQLite to maintain a queue of Python jobs with their execution parameters, status, and metadata.</li> <li>Job Runner Service: A daemon process that:<ul> <li>Runs jobs sequentially using tmux sessions</li> <li>Handles GPU resource allocation</li> <li>Provides email notifications for job status</li> <li>Manages conda/Python environments for different jobs</li> </ul> </li> <li>Web Dashboard: A FastAPI-based interface that displays:<ul> <li>Current GPU status</li> <li>Job queue with filtering options</li> <li>Real-time job output</li> <li>GPU usage timeline</li> </ul> </li> <li>System Integration: Runs as a systemd service on Linux, with proper user permissions and environment management</li> </ul>"},{"location":"#quick-navigation","title":"Quick Navigation","text":"<ul> <li>Installation</li> <li>API</li> <li>JobRunner</li> <li>Dashboard</li> </ul>"},{"location":"01_installation/","title":"Installation Guide","text":"<p>Can technically work as a library on Windows, Mac, or Linux. If you want to use as a standalone app, best to use with an Debian-based OS with systemd and a NVIDIA GPU.</p>"},{"location":"01_installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>TMUX - For managing terminal sessions</li> <li>NVIDIA GPU (recommended for GPU-accelerated jobs)</li> <li>Systemd (for Linux service management)</li> <li>Gmail account (to enable email notifications)</li> </ul>"},{"location":"01_installation/#installation","title":"Installation","text":"<p>For best results as a standalone application, it is recommended to install in a virtual environment. It is recommended to use uv as environment and package manager for Python. Regardless, can also be installed as a package to be used in other projects.</p> <pre><code># Clone repository\ngit clone https://github.com/thicclatka/SQLJobScheduler.git\ncd SQLJobScheduler\n\n# if using uv\nuv venv /path/to/env --python 3.12\nsource /path/to/env/bin/activate\nuv pip install .\n\n# if using conda\nconda create -n ENV_NAME python=3.12\nconda activate ENV_NAME\npip install .\n\n# or installing as a library\n# activate environment, as long as python version &gt;= 3.9\npip install .\n</code></pre>"},{"location":"01_installation/#setup","title":"Setup","text":"<p>To enable web app dashboard and background job runner for systemd, follow the steps above and then:</p> <pre><code># be in desired venv\nsource /path/to/env/bin/activate\n\n# make setup file executable\nchmod +x setup.sh\n# run setup\n./setup.sh\n</code></pre> <p>During setup, you'll be prompted for:</p> <ul> <li>Username (with appropriate privileges)</li> <li>Group name (with appropriate privileges)</li> <li>Server IP address (if running remotely)</li> <li>Port number for the job lister</li> <li>App name (defaults to 'gpujobs')</li> <li>Email address to set up notifier (must be gmail)</li> <li>Gmail App Password</li> </ul> <p>A message will be printed at the end with commands that can be copied to then enable and run the services. They should look something like this:</p> <pre><code>sudo cp /path/to/SQLJobScheduler/ServerService/services/*.service /etc/systemd/system/\nsudo systemctl daemon-reload\nchmod +x /path/to/SQLJobScheduler/ServerService/shell_scripts/start_jobrunner.sh\nsudo systemctl enable gpuJobRunner\nsudo systemctl start gpuJobRunner\nsudo systemctl enable jobLister\nsudo systemctl start jobLister\n</code></pre>"},{"location":"01_installation/#verification","title":"Verification","text":"<p>To verify the installation:</p> <pre><code>sudo systemctl status [SERVICE-NAME] \n</code></pre> <p>Access the web dashboard:</p> <ul> <li>Open a web browser</li> <li>Navigate to <code>http://&lt;server_ip&gt;:&lt;port</code><ul> <li>example: <code>http://localhost:8000</code></li> </ul> </li> </ul>"},{"location":"01_installation/#uninstallation","title":"Uninstallation","text":"<p>To remove the services:</p> <pre><code># Stop and disable services\nsudo systemctl stop gpuJobRunner\nsudo systemctl disable gpuJobRunner\nsudo systemctl stop jobLister\nsudo systemctl disable jobLister\n\n# Remove service files\nsudo rm /etc/systemd/system/gpuJobRunner.service\nsudo rm /etc/systemd/system/jobLister.service\n\n# Reload systemd\nsudo systemctl daemon-reload\n</code></pre>"},{"location":"02_api_usage/","title":"API Usage Guide","text":"<p>This guide covers the main API components of SQLJobScheduler, including email notifications and GPU management.</p>"},{"location":"02_api_usage/#email-configuration","title":"Email Configuration","text":"<p>SQLJobScheduler supports email notifications for job status updates. It is best to run this as a CLI to have it set up before being used. Every file is made based on the user who runs the script.</p> <ol> <li>Generate email credentials:</li> </ol> <pre><code># Run the setup script which will prompt for email configuration\n./setup.sh\n\n# if you want to set up email credentials without running base set up\n./setup.sh --email-only\n</code></pre> <ol> <li>The encrypted credentials file with its respective key will be created at <code>~/.sqljobscheduler/Credentials/</code> with the following structure:</li> </ol> <pre><code>{\n    \"email\": \"your.email@example.com\",\n    \"password\": \"your_app_specific_password\",\n    \"smtp_server\": \"smtp.gmail.com\",\n    \"smtp_port\": 587,\n    \"server_address\": \"your.server.address\",\n    \"dashboard_url\": \"http://your.server:port/app_name\"\n}\n</code></pre> <ol> <li>Using email notifications in your code:</li> </ol> <pre><code>import os\nfrom sqljobscheduler.EmailNotifier import EmailNotifier\n\n# Initialize the notifier\nnotifier = EmailNotifier()\n\n# notify job start\nnotifier.notify_job_start(\n    recipient=job.email_address,\n    job_id=job.id,\n    script=job.programPath,\n    pid=int(os.getpid()),\n)\n\n# notify job complete\nnotifier.notify_job_complete()\n# notify job fail\nnotifier.notify_job_failed()\n</code></pre>"},{"location":"02_api_usage/#gpu-management","title":"GPU Management","text":"<p>SQLJobScheduler provides GPU locking functionality to prevent multiple jobs from using the same GPU simultaneously. This is implemented using lock files, which are stored in the system's temporary directory:</p> <ul> <li>Linux/Unix: <code>/tmp/gpu_lock.json</code></li> <li>Windows: <code>C:\\Users\\&lt;username&gt;\\AppData\\Local\\Temp\\gpu_lock.json</code></li> <li>macOS: <code>/var/folders/.../gpu_lock.json</code></li> </ul>"},{"location":"02_api_usage/#basic-gpu-lock-usage","title":"Basic GPU Lock Usage","text":""},{"location":"02_api_usage/#with-gpu-lock-context","title":"With GPU Lock context","text":"<pre><code>import os\nimport getpass\nfrom pathlib import Path\nfrom sqljobscheduler import LockFileUtils\n\ndef main()\n    # context will handle checking, creating, and removing gpu lock files\n    with LockFileUtils.run_script_Wgpu_lock(\n        user=getpass.getuser(),\n        script=Path(__file__).name,\n        pid=int(os.getpid()),\n        ctype=\"cli\"\n        # job_id: str [Optional]\n        # logging_bool: bool Whether to logging.info when gpu lock is applied or remove, default is True\n        try:\n            example_func()\n        except:\n            pass\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"02_api_usage/#without-gpu-lock-context-if-more-flexibility-is-desired","title":"Without GPU Lock context (if more flexibility is desired)","text":"<pre><code>import os\nimport getpass\nfrom pathlib import Path\nfrom sqljobscheduler import LockFileUtils\n\ndef main():\n    # Check if GPU is available\n    if not LockFileUtils.check_gpu_lock_file(\n\n    ):\n        print(\"Creating GPU lock file for this run\")\n        # inputting defaults\n        LockFileUtils.create_gpu_lock_file(\n            user=getpass.getuser(),\n            script=Path(__file__).name,\n            pid=int(os.getpid()),\n            ctype=\"cli\", # \"cli\" is default option\n            # job_id: str [Optional]\n        )\n\n    try:\n        # Your GPU-intensive code here\n        ...\n    except as Exception1:\n        ...\n    .\n    .\n    .\n    except as ExeceptionN:\n        ...\n    finally:\n        # Always remove the lock file when done\n        LockFileUtils.remove_gpu_lock_file()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"02_api_usage/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Always Remove Lock Files:</p> <ul> <li>Use <code>try</code>/<code>finally</code> blocks to ensure lock files are removed if not using GPU Lock Context</li> <li>Call <code>LockFileUtils.remove_gpu_lock_file()</code> in the <code>finally</code> block</li> </ul> </li> <li> <p>Check GPU Availability:</p> <ul> <li>Use <code>LockFileUtils.check_gpu_lock_file()</code> before creating new locks</li> <li>Consider using <code>gpu_lock_check_timer()</code> for timeouts</li> </ul> </li> <li> <p>Proper Lock File Creation:</p> <ul> <li>Include user information</li> <li>Include script name</li> <li>Include process ID</li> <li>Specify client type (\"cli\" for command line)</li> </ul> </li> </ol>"},{"location":"03_jobrunner/","title":"JobRunner Guide","text":"<p>This guide covers how to access and manage the JobRunner service, including its logs and tmux sessions.</p>"},{"location":"03_jobrunner/#accessing-jobrunner-logs","title":"Accessing JobRunner Logs","text":"<p>Logs for the runner are stored <code>~/.sqljobscheduler/logs/job_runner</code>. If any issues related to tmux operations are run into within the analysis of a job are stored in <code>~/.sqljobscheduler/logs/tmux</code>.</p>"},{"location":"03_jobrunner/#tmux-session-access","title":"TMUX Session Access","text":"<p>The JobRunner runs in a tmux session with specific socket and server configurations:</p> <pre><code># The socket is located at\n/tmp/tmux-$(id -u)/JobRunner\n\n# attach to session which stores job runner\ntmux /tmp/tmux-$(id -u)/JobRunner attach -t JobRunner\n\n# attach to specific job\ntmux /tmp/tmux-$(id -u)/JobRunner attach -t job[NUM]\n</code></pre>"},{"location":"03_jobrunner/#systemd-settings","title":"Systemd Settings","text":"<p>Service can be found under the name <code>joblister.service</code>.</p>"},{"location":"04_joblister/","title":"JobLister Dashboard Guide","text":"<p>The JobLister dashboard is a FastAPI-based web interface that provides real-time monitoring and management of GPU jobs.</p> <p></p>"},{"location":"04_joblister/#features","title":"Features","text":""},{"location":"04_joblister/#1-gpu-status-panel","title":"1. GPU Status Panel","text":"<p>Located in the sidebar, and can be accessed by clicked the <code>GPU STATUS</code> button when it says <code>IN USE</code> shows:</p> <ul> <li>User running the job</li> <li>Script name</li> <li>Start time</li> <li>Process ID (PID)</li> <li>Job type (SQL or CLI)</li> <li>Job ID (for SQL jobs)</li> </ul> <p>When the GPU says <code>AVAILABLE</code> sidebar is not accessible.</p>"},{"location":"04_joblister/#2-job-queue-display","title":"2. Job Queue Display","text":"<p>Shows a comprehensive table of jobs with:</p> <ul> <li>Job ID</li> <li>Program name</li> <li>Email address</li> <li>Parameters (hover with cursor to see all details)</li> <li>Status</li> <li>Creation time</li> <li>Start time</li> <li>Completion time</li> <li>Error messages (if any; hover with cursor to see all details)</li> </ul>"},{"location":"04_joblister/#filtering-options","title":"Filtering Options","text":"<ul> <li>Filter jobs by status (Pending, Running, Completed, Failed) or by date</li> </ul>"},{"location":"04_joblister/#3-real-time-output","title":"3. Real-time Output","text":"<p>The dashboard provides real-time output display for status of the job runner and if there are any current jobs:</p>"},{"location":"04_joblister/#current-job-output","title":"Current Job Output","text":"<ul> <li>Automatically captures and displays output from the running job's tmux session</li> <li>Updates in real-time as the dashboard refreshes</li> <li>Shows complete terminal output including errors and progress</li> <li>Source of progress is a captured pane from the tmux session stored in <code>~/.sqljobscheduler/logs/tmux4WA/</code></li> </ul>"},{"location":"04_joblister/#job-runner-status","title":"Job Runner Status","text":"<ul> <li>Displays the latest JobRunner log file</li> <li>Shows service status and any system-level messages</li> <li>Can filter logs by date</li> <li>When more than 7 days worth of logs are found, user is provided option to clear all logs older than 7 days</li> </ul>"},{"location":"04_joblister/#accessing-the-dashboard","title":"Accessing the Dashboard","text":"<ol> <li>Open a web browser</li> <li>Navigate to:<ul> <li><code>0.0.0.0:[PORT]</code> on local machine</li> <li><code>[BROADCAST_IP]:[PORT]</code> from remote machine</li> <li>by default the port is set to <code>8000</code>, but can be modified in <code>/ServerService/templates/app_settings.json</code></li> </ul> </li> </ol>"}]}